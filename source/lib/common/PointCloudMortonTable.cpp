/* The copyright in this software is being made available under the BSD
* License, included below. This software may be subject to other third party
* and contributor rights, including patent rights, and no such rights are
* granted under this license.
*
* Copyright (c) 2019-2033, Audio Video coding Standard Workgroup of China
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  * Redistributions of source code must retain the above copyright notice,
*    this list of conditions and the following disclaimer.
*  * Redistributions in binary form must reproduce the above copyright notice,
*    this list of conditions and the following disclaimer in the documentation
*    and/or other materials provided with the distribution.
*  * Neither the name of Audio Video coding Standard Workgroup of China
*    nor the names of its contributors maybe used to endorse or promote products
*    derived from this software without
*    specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
* BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
* THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "PointCloudMortonTable.h"

const uint32_t pointCloudMortonCode256Z[256] = {
  0x00000000, 0x00000001, 0x00000008, 0x00000009, 0x00000040, 0x00000041, 0x00000048, 0x00000049,
  0x00000200, 0x00000201, 0x00000208, 0x00000209, 0x00000240, 0x00000241, 0x00000248, 0x00000249,
  0x00001000, 0x00001001, 0x00001008, 0x00001009, 0x00001040, 0x00001041, 0x00001048, 0x00001049,
  0x00001200, 0x00001201, 0x00001208, 0x00001209, 0x00001240, 0x00001241, 0x00001248, 0x00001249,
  0x00008000, 0x00008001, 0x00008008, 0x00008009, 0x00008040, 0x00008041, 0x00008048, 0x00008049,
  0x00008200, 0x00008201, 0x00008208, 0x00008209, 0x00008240, 0x00008241, 0x00008248, 0x00008249,
  0x00009000, 0x00009001, 0x00009008, 0x00009009, 0x00009040, 0x00009041, 0x00009048, 0x00009049,
  0x00009200, 0x00009201, 0x00009208, 0x00009209, 0x00009240, 0x00009241, 0x00009248, 0x00009249,
  0x00040000, 0x00040001, 0x00040008, 0x00040009, 0x00040040, 0x00040041, 0x00040048, 0x00040049,
  0x00040200, 0x00040201, 0x00040208, 0x00040209, 0x00040240, 0x00040241, 0x00040248, 0x00040249,
  0x00041000, 0x00041001, 0x00041008, 0x00041009, 0x00041040, 0x00041041, 0x00041048, 0x00041049,
  0x00041200, 0x00041201, 0x00041208, 0x00041209, 0x00041240, 0x00041241, 0x00041248, 0x00041249,
  0x00048000, 0x00048001, 0x00048008, 0x00048009, 0x00048040, 0x00048041, 0x00048048, 0x00048049,
  0x00048200, 0x00048201, 0x00048208, 0x00048209, 0x00048240, 0x00048241, 0x00048248, 0x00048249,
  0x00049000, 0x00049001, 0x00049008, 0x00049009, 0x00049040, 0x00049041, 0x00049048, 0x00049049,
  0x00049200, 0x00049201, 0x00049208, 0x00049209, 0x00049240, 0x00049241, 0x00049248, 0x00049249,
  0x00200000, 0x00200001, 0x00200008, 0x00200009, 0x00200040, 0x00200041, 0x00200048, 0x00200049,
  0x00200200, 0x00200201, 0x00200208, 0x00200209, 0x00200240, 0x00200241, 0x00200248, 0x00200249,
  0x00201000, 0x00201001, 0x00201008, 0x00201009, 0x00201040, 0x00201041, 0x00201048, 0x00201049,
  0x00201200, 0x00201201, 0x00201208, 0x00201209, 0x00201240, 0x00201241, 0x00201248, 0x00201249,
  0x00208000, 0x00208001, 0x00208008, 0x00208009, 0x00208040, 0x00208041, 0x00208048, 0x00208049,
  0x00208200, 0x00208201, 0x00208208, 0x00208209, 0x00208240, 0x00208241, 0x00208248, 0x00208249,
  0x00209000, 0x00209001, 0x00209008, 0x00209009, 0x00209040, 0x00209041, 0x00209048, 0x00209049,
  0x00209200, 0x00209201, 0x00209208, 0x00209209, 0x00209240, 0x00209241, 0x00209248, 0x00209249,
  0x00240000, 0x00240001, 0x00240008, 0x00240009, 0x00240040, 0x00240041, 0x00240048, 0x00240049,
  0x00240200, 0x00240201, 0x00240208, 0x00240209, 0x00240240, 0x00240241, 0x00240248, 0x00240249,
  0x00241000, 0x00241001, 0x00241008, 0x00241009, 0x00241040, 0x00241041, 0x00241048, 0x00241049,
  0x00241200, 0x00241201, 0x00241208, 0x00241209, 0x00241240, 0x00241241, 0x00241248, 0x00241249,
  0x00248000, 0x00248001, 0x00248008, 0x00248009, 0x00248040, 0x00248041, 0x00248048, 0x00248049,
  0x00248200, 0x00248201, 0x00248208, 0x00248209, 0x00248240, 0x00248241, 0x00248248, 0x00248249,
  0x00249000, 0x00249001, 0x00249008, 0x00249009, 0x00249040, 0x00249041, 0x00249048, 0x00249049,
  0x00249200, 0x00249201, 0x00249208, 0x00249209, 0x00249240, 0x00249241, 0x00249248, 0x00249249};

const uint32_t pointCloudMortonCode256Y[256] = {
  0x00000000, 0x00000002, 0x00000010, 0x00000012, 0x00000080, 0x00000082, 0x00000090, 0x00000092,
  0x00000400, 0x00000402, 0x00000410, 0x00000412, 0x00000480, 0x00000482, 0x00000490, 0x00000492,
  0x00002000, 0x00002002, 0x00002010, 0x00002012, 0x00002080, 0x00002082, 0x00002090, 0x00002092,
  0x00002400, 0x00002402, 0x00002410, 0x00002412, 0x00002480, 0x00002482, 0x00002490, 0x00002492,
  0x00010000, 0x00010002, 0x00010010, 0x00010012, 0x00010080, 0x00010082, 0x00010090, 0x00010092,
  0x00010400, 0x00010402, 0x00010410, 0x00010412, 0x00010480, 0x00010482, 0x00010490, 0x00010492,
  0x00012000, 0x00012002, 0x00012010, 0x00012012, 0x00012080, 0x00012082, 0x00012090, 0x00012092,
  0x00012400, 0x00012402, 0x00012410, 0x00012412, 0x00012480, 0x00012482, 0x00012490, 0x00012492,
  0x00080000, 0x00080002, 0x00080010, 0x00080012, 0x00080080, 0x00080082, 0x00080090, 0x00080092,
  0x00080400, 0x00080402, 0x00080410, 0x00080412, 0x00080480, 0x00080482, 0x00080490, 0x00080492,
  0x00082000, 0x00082002, 0x00082010, 0x00082012, 0x00082080, 0x00082082, 0x00082090, 0x00082092,
  0x00082400, 0x00082402, 0x00082410, 0x00082412, 0x00082480, 0x00082482, 0x00082490, 0x00082492,
  0x00090000, 0x00090002, 0x00090010, 0x00090012, 0x00090080, 0x00090082, 0x00090090, 0x00090092,
  0x00090400, 0x00090402, 0x00090410, 0x00090412, 0x00090480, 0x00090482, 0x00090490, 0x00090492,
  0x00092000, 0x00092002, 0x00092010, 0x00092012, 0x00092080, 0x00092082, 0x00092090, 0x00092092,
  0x00092400, 0x00092402, 0x00092410, 0x00092412, 0x00092480, 0x00092482, 0x00092490, 0x00092492,
  0x00400000, 0x00400002, 0x00400010, 0x00400012, 0x00400080, 0x00400082, 0x00400090, 0x00400092,
  0x00400400, 0x00400402, 0x00400410, 0x00400412, 0x00400480, 0x00400482, 0x00400490, 0x00400492,
  0x00402000, 0x00402002, 0x00402010, 0x00402012, 0x00402080, 0x00402082, 0x00402090, 0x00402092,
  0x00402400, 0x00402402, 0x00402410, 0x00402412, 0x00402480, 0x00402482, 0x00402490, 0x00402492,
  0x00410000, 0x00410002, 0x00410010, 0x00410012, 0x00410080, 0x00410082, 0x00410090, 0x00410092,
  0x00410400, 0x00410402, 0x00410410, 0x00410412, 0x00410480, 0x00410482, 0x00410490, 0x00410492,
  0x00412000, 0x00412002, 0x00412010, 0x00412012, 0x00412080, 0x00412082, 0x00412090, 0x00412092,
  0x00412400, 0x00412402, 0x00412410, 0x00412412, 0x00412480, 0x00412482, 0x00412490, 0x00412492,
  0x00480000, 0x00480002, 0x00480010, 0x00480012, 0x00480080, 0x00480082, 0x00480090, 0x00480092,
  0x00480400, 0x00480402, 0x00480410, 0x00480412, 0x00480480, 0x00480482, 0x00480490, 0x00480492,
  0x00482000, 0x00482002, 0x00482010, 0x00482012, 0x00482080, 0x00482082, 0x00482090, 0x00482092,
  0x00482400, 0x00482402, 0x00482410, 0x00482412, 0x00482480, 0x00482482, 0x00482490, 0x00482492,
  0x00490000, 0x00490002, 0x00490010, 0x00490012, 0x00490080, 0x00490082, 0x00490090, 0x00490092,
  0x00490400, 0x00490402, 0x00490410, 0x00490412, 0x00490480, 0x00490482, 0x00490490, 0x00490492,
  0x00492000, 0x00492002, 0x00492010, 0x00492012, 0x00492080, 0x00492082, 0x00492090, 0x00492092,
  0x00492400, 0x00492402, 0x00492410, 0x00492412, 0x00492480, 0x00492482, 0x00492490, 0x00492492};

const uint32_t pointCloudMortonCode256X[256] = {
  0x00000000, 0x00000004, 0x00000020, 0x00000024, 0x00000100, 0x00000104, 0x00000120, 0x00000124,
  0x00000800, 0x00000804, 0x00000820, 0x00000824, 0x00000900, 0x00000904, 0x00000920, 0x00000924,
  0x00004000, 0x00004004, 0x00004020, 0x00004024, 0x00004100, 0x00004104, 0x00004120, 0x00004124,
  0x00004800, 0x00004804, 0x00004820, 0x00004824, 0x00004900, 0x00004904, 0x00004920, 0x00004924,
  0x00020000, 0x00020004, 0x00020020, 0x00020024, 0x00020100, 0x00020104, 0x00020120, 0x00020124,
  0x00020800, 0x00020804, 0x00020820, 0x00020824, 0x00020900, 0x00020904, 0x00020920, 0x00020924,
  0x00024000, 0x00024004, 0x00024020, 0x00024024, 0x00024100, 0x00024104, 0x00024120, 0x00024124,
  0x00024800, 0x00024804, 0x00024820, 0x00024824, 0x00024900, 0x00024904, 0x00024920, 0x00024924,
  0x00100000, 0x00100004, 0x00100020, 0x00100024, 0x00100100, 0x00100104, 0x00100120, 0x00100124,
  0x00100800, 0x00100804, 0x00100820, 0x00100824, 0x00100900, 0x00100904, 0x00100920, 0x00100924,
  0x00104000, 0x00104004, 0x00104020, 0x00104024, 0x00104100, 0x00104104, 0x00104120, 0x00104124,
  0x00104800, 0x00104804, 0x00104820, 0x00104824, 0x00104900, 0x00104904, 0x00104920, 0x00104924,
  0x00120000, 0x00120004, 0x00120020, 0x00120024, 0x00120100, 0x00120104, 0x00120120, 0x00120124,
  0x00120800, 0x00120804, 0x00120820, 0x00120824, 0x00120900, 0x00120904, 0x00120920, 0x00120924,
  0x00124000, 0x00124004, 0x00124020, 0x00124024, 0x00124100, 0x00124104, 0x00124120, 0x00124124,
  0x00124800, 0x00124804, 0x00124820, 0x00124824, 0x00124900, 0x00124904, 0x00124920, 0x00124924,
  0x00800000, 0x00800004, 0x00800020, 0x00800024, 0x00800100, 0x00800104, 0x00800120, 0x00800124,
  0x00800800, 0x00800804, 0x00800820, 0x00800824, 0x00800900, 0x00800904, 0x00800920, 0x00800924,
  0x00804000, 0x00804004, 0x00804020, 0x00804024, 0x00804100, 0x00804104, 0x00804120, 0x00804124,
  0x00804800, 0x00804804, 0x00804820, 0x00804824, 0x00804900, 0x00804904, 0x00804920, 0x00804924,
  0x00820000, 0x00820004, 0x00820020, 0x00820024, 0x00820100, 0x00820104, 0x00820120, 0x00820124,
  0x00820800, 0x00820804, 0x00820820, 0x00820824, 0x00820900, 0x00820904, 0x00820920, 0x00820924,
  0x00824000, 0x00824004, 0x00824020, 0x00824024, 0x00824100, 0x00824104, 0x00824120, 0x00824124,
  0x00824800, 0x00824804, 0x00824820, 0x00824824, 0x00824900, 0x00824904, 0x00824920, 0x00824924,
  0x00900000, 0x00900004, 0x00900020, 0x00900024, 0x00900100, 0x00900104, 0x00900120, 0x00900124,
  0x00900800, 0x00900804, 0x00900820, 0x00900824, 0x00900900, 0x00900904, 0x00900920, 0x00900924,
  0x00904000, 0x00904004, 0x00904020, 0x00904024, 0x00904100, 0x00904104, 0x00904120, 0x00904124,
  0x00904800, 0x00904804, 0x00904820, 0x00904824, 0x00904900, 0x00904904, 0x00904920, 0x00904924,
  0x00920000, 0x00920004, 0x00920020, 0x00920024, 0x00920100, 0x00920104, 0x00920120, 0x00920124,
  0x00920800, 0x00920804, 0x00920820, 0x00920824, 0x00920900, 0x00920904, 0x00920920, 0x00920924,
  0x00924000, 0x00924004, 0x00924020, 0x00924024, 0x00924100, 0x00924104, 0x00924120, 0x00924124,
  0x00924800, 0x00924804, 0x00924820, 0x00924824, 0x00924900, 0x00924904, 0x00924920, 0x00924924};

const uint8_t HilbertTable[12][64][2] = {
  {{4, 0},   {10, 3}, {6, 60},  {2, 63},  {9, 7},  {10, 4},  {6, 59},  {8, 56},
   {0, 8},   {5, 9},  {1, 54},  {0, 55},  {8, 11}, {5, 10},  {1, 53},  {9, 52},
   {0, 1},   {0, 2},  {0, 61},  {0, 62},  {7, 6},  {7, 5},   {7, 58},  {7, 57},
   {11, 15}, {6, 14}, {10, 49}, {11, 48}, {8, 12}, {6, 13},  {10, 50}, {9, 51},
   {9, 26},  {8, 29}, {9, 34},  {8, 37},  {0, 27}, {0, 28},  {0, 35},  {0, 36},
   {0, 16},  {5, 17}, {1, 46},  {0, 47},  {8, 19}, {5, 18},  {1, 45},  {9, 44},
   {9, 25},  {8, 30}, {9, 33},  {8, 38},  {6, 24}, {10, 31}, {6, 32},  {10, 39},
   {11, 23}, {6, 22}, {10, 41}, {11, 40}, {8, 20}, {6, 21},  {10, 42}, {9, 43}},
  {{11, 38}, {11, 37}, {1, 62},  {0, 63}, {3, 33}, {3, 34}, {1, 61}, {9, 60}, {11, 30}, {11, 29},
   {1, 2},   {4, 3},   {3, 25},  {3, 26}, {1, 1},  {7, 0},  {4, 39}, {1, 36}, {10, 57}, {11, 56},
   {9, 32},  {1, 35},  {10, 58}, {9, 59}, {4, 31}, {1, 28}, {10, 5}, {4, 4},  {9, 24},  {1, 27},
   {10, 6},  {3, 7},   {5, 40},  {1, 47}, {5, 48}, {1, 55}, {4, 41}, {2, 46}, {4, 49},  {2, 54},
   {9, 22},  {8, 17},  {9, 14},  {8, 9},  {5, 23}, {1, 16}, {5, 15}, {1, 8},  {3, 43},  {3, 44},
   {3, 51},  {3, 52},  {4, 42},  {2, 45}, {4, 50}, {2, 53}, {9, 21}, {8, 18}, {9, 13},  {8, 10},
   {11, 20}, {11, 19}, {11, 12}, {11, 11}},
  {{6, 52},  {2, 55},  {5, 56},  {1, 63}, {6, 51}, {8, 48}, {4, 57}, {2, 62}, {6, 44}, {2, 47},
   {2, 36},  {5, 37},  {6, 43},  {8, 40}, {7, 39}, {5, 38}, {0, 53}, {0, 54}, {3, 59}, {3, 60},
   {7, 50},  {7, 49},  {4, 58},  {2, 61}, {0, 45}, {0, 46}, {2, 35}, {6, 34}, {7, 42}, {7, 41},
   {3, 32},  {6, 33},  {11, 10}, {11, 9}, {7, 4},  {7, 3},  {3, 13}, {3, 14}, {4, 5},  {2, 2},
   {11, 18}, {11, 17}, {2, 28},  {5, 29}, {3, 21}, {3, 22}, {7, 31}, {5, 30}, {5, 11}, {2, 8},
   {6, 7},   {10, 0},  {5, 12},  {8, 15}, {4, 6},  {2, 1},  {5, 19}, {2, 16}, {2, 27}, {6, 26},
   {5, 20},  {8, 23},  {3, 24},  {6, 25}},
  {{2, 20},  {5, 21}, {1, 42},  {4, 43},  {7, 23},  {5, 22}, {1, 41}, {7, 40}, {5, 24},  {1, 31},
   {5, 32},  {1, 39}, {4, 25},  {2, 30},  {4, 33},  {2, 38}, {2, 19}, {6, 18}, {10, 45}, {4, 44},
   {3, 16},  {6, 17}, {10, 46}, {3, 47},  {3, 27},  {3, 28}, {3, 35}, {3, 36}, {4, 26},  {2, 29},
   {4, 34},  {2, 37}, {2, 12},  {5, 13},  {1, 50},  {4, 51}, {7, 15}, {5, 14}, {1, 49},  {7, 48},
   {11, 6},  {11, 5}, {11, 58}, {11, 57}, {3, 1},   {3, 2},  {3, 61}, {3, 62}, {2, 11},  {6, 10},
   {10, 53}, {4, 52}, {3, 8},   {6, 9},   {10, 54}, {3, 55}, {4, 7},  {1, 4},  {5, 59},  {2, 56},
   {9, 0},   {1, 3},  {5, 60},  {8, 63}},
  {{5, 0},   {1, 7},   {4, 8},   {10, 11}, {4, 1},   {2, 6},  {9, 15}, {10, 12},
   {1, 26},  {4, 27},  {4, 16},  {10, 19}, {1, 25},  {7, 24}, {9, 23}, {10, 20},
   {3, 3},   {3, 4},   {0, 9},   {0, 10},  {4, 2},   {2, 5},  {7, 14}, {7, 13},
   {10, 29}, {4, 28},  {0, 17},  {0, 18},  {10, 30}, {3, 31}, {7, 22}, {7, 21},
   {7, 60},  {7, 59},  {11, 54}, {11, 53}, {4, 61},  {2, 58}, {3, 49}, {3, 50},
   {1, 34},  {4, 35},  {11, 46}, {11, 45}, {1, 33},  {7, 32}, {3, 41}, {3, 42},
   {6, 63},  {10, 56}, {4, 55},  {1, 52},  {4, 62},  {2, 57}, {9, 48}, {1, 51},
   {10, 37}, {4, 36},  {4, 47},  {1, 44},  {10, 38}, {3, 39}, {9, 40}, {1, 43}},
  {{0, 0},   {5, 1},   {11, 26}, {11, 25}, {8, 3},  {5, 2},  {3, 29}, {3, 30}, {2, 60}, {5, 61},
   {11, 34}, {11, 33}, {7, 63},  {5, 62},  {3, 37}, {3, 38}, {11, 7}, {6, 6},  {5, 27}, {2, 24},
   {8, 4},   {6, 5},   {5, 28},  {8, 31},  {2, 59}, {6, 58}, {5, 35}, {2, 32}, {3, 56}, {6, 57},
   {5, 36},  {8, 39},  {5, 8},   {1, 15},  {5, 16}, {1, 23}, {4, 9},  {2, 14}, {4, 17}, {2, 22},
   {9, 54},  {8, 49},  {9, 46},  {8, 41},  {5, 55}, {1, 48}, {5, 47}, {1, 40}, {3, 11}, {3, 12},
   {3, 19},  {3, 20},  {4, 10},  {2, 13},  {4, 18}, {2, 21}, {9, 53}, {8, 50}, {9, 45}, {8, 42},
   {11, 52}, {11, 51}, {11, 44}, {11, 43}},
  {{7, 52}, {7, 51},  {7, 44}, {7, 43}, {4, 53}, {2, 50}, {4, 45}, {2, 42},  {9, 10},  {8, 13},
   {9, 18}, {8, 21},  {0, 11}, {0, 12}, {0, 19}, {0, 20}, {6, 55}, {10, 48}, {6, 47},  {10, 40},
   {4, 54}, {2, 49},  {4, 46}, {2, 41}, {9, 9},  {8, 14}, {9, 17}, {8, 22},  {6, 8},   {10, 15},
   {6, 16}, {10, 23}, {0, 56}, {5, 57}, {6, 36}, {2, 39}, {8, 59}, {5, 58},  {6, 35},  {8, 32},
   {2, 4},  {5, 5},   {6, 28}, {2, 31}, {7, 7},  {5, 6},  {6, 27}, {8, 24},  {11, 63}, {6, 62},
   {0, 37}, {0, 38},  {8, 60}, {6, 61}, {7, 34}, {7, 33}, {2, 3},  {6, 2},   {0, 29},  {0, 30},
   {3, 0},  {6, 1},   {7, 26}, {7, 25}},
  {{2, 52},  {5, 53}, {1, 10},  {4, 11},  {7, 55},  {5, 54}, {1, 9},  {7, 8},   {4, 56},  {10, 59},
   {6, 4},   {2, 7},  {9, 63},  {10, 60}, {6, 3},   {8, 0},  {2, 51}, {6, 50},  {10, 13}, {4, 12},
   {3, 48},  {6, 49}, {10, 14}, {3, 15},  {0, 57},  {0, 58}, {0, 5},  {0, 6},   {7, 62},  {7, 61},
   {7, 2},   {7, 1},  {2, 44},  {5, 45},  {1, 18},  {4, 19}, {7, 47}, {5, 46},  {1, 17},  {7, 16},
   {7, 36},  {7, 35}, {7, 28},  {7, 27},  {4, 37},  {2, 34}, {4, 29}, {2, 26},  {2, 43},  {6, 42},
   {10, 21}, {4, 20}, {3, 40},  {6, 41},  {10, 22}, {3, 23}, {6, 39}, {10, 32}, {6, 31},  {10, 24},
   {4, 38},  {2, 33}, {4, 30},  {2, 25}},
  {{6, 20},  {2, 23},  {0, 24},  {5, 25},  {6, 19}, {8, 16}, {8, 27}, {5, 26}, {6, 12},  {2, 15},
   {9, 6},   {8, 1},   {6, 11},  {8, 8},   {5, 7},  {1, 0},  {0, 21}, {0, 22}, {11, 31}, {6, 30},
   {7, 18},  {7, 17},  {8, 28},  {6, 29},  {0, 13}, {0, 14}, {9, 5},  {8, 2},  {7, 10},  {7, 9},
   {11, 4},  {11, 3},  {11, 42}, {11, 41}, {0, 32}, {5, 33}, {3, 45}, {3, 46}, {8, 35},  {5, 34},
   {11, 50}, {11, 49}, {9, 58},  {8, 61},  {3, 53}, {3, 54}, {0, 59}, {0, 60}, {5, 43},  {2, 40},
   {11, 39}, {6, 38},  {5, 44},  {8, 47},  {8, 36}, {6, 37}, {5, 51}, {2, 48}, {9, 57},  {8, 62},
   {5, 52},  {8, 55},  {6, 56},  {10, 63}},
  {{1, 38},  {0, 39},  {4, 40},  {10, 43}, {1, 37},  {9, 36},  {9, 47}, {10, 44},
   {9, 62},  {8, 57},  {4, 48},  {10, 51}, {5, 63},  {1, 56},  {9, 55}, {10, 52},
   {10, 33}, {11, 32}, {0, 41},  {0, 42},  {10, 34}, {9, 35},  {7, 46}, {7, 45},
   {9, 61},  {8, 58},  {0, 49},  {0, 50},  {11, 60}, {11, 59}, {7, 54}, {7, 53},
   {1, 30},  {0, 31},  {11, 22}, {11, 21}, {1, 29},  {9, 28},  {3, 17}, {3, 18},
   {9, 2},   {8, 5},   {11, 14}, {11, 13}, {0, 3},   {0, 4},   {3, 9},  {3, 10},
   {10, 25}, {11, 24}, {4, 23},  {1, 20},  {10, 26}, {9, 27},  {9, 16}, {1, 19},
   {9, 1},   {8, 6},   {4, 15},  {1, 12},  {6, 0},   {10, 7},  {9, 8},  {1, 11}},
  {{7, 20}, {7, 19},  {7, 12},  {7, 11},  {4, 21}, {2, 18},  {4, 13}, {2, 10},  {9, 42},  {8, 45},
   {9, 50}, {8, 53},  {0, 43},  {0, 44},  {0, 51}, {0, 52},  {6, 23}, {10, 16}, {6, 15},  {10, 8},
   {4, 22}, {2, 17},  {4, 14},  {2, 9},   {9, 41}, {8, 46},  {9, 49}, {8, 54},  {6, 40},  {10, 47},
   {6, 48}, {10, 55}, {4, 24},  {10, 27}, {1, 6},  {0, 7},   {9, 31}, {10, 28}, {1, 5},   {9, 4},
   {4, 32}, {10, 35}, {1, 58},  {4, 59},  {9, 39}, {10, 36}, {1, 57}, {7, 56},  {0, 25},  {0, 26},
   {10, 1}, {11, 0},  {7, 30},  {7, 29},  {10, 2}, {9, 3},   {0, 33}, {0, 34},  {10, 61}, {4, 60},
   {7, 38}, {7, 37},  {10, 62}, {3, 63}},
  {{9, 38},  {8, 33},  {9, 30},  {8, 25},  {5, 39},  {1, 32}, {5, 31},  {1, 24},  {0, 40}, {5, 41},
   {1, 22},  {0, 23},  {8, 43},  {5, 42},  {1, 21},  {9, 20}, {9, 37},  {8, 34},  {9, 29}, {8, 26},
   {11, 36}, {11, 35}, {11, 28}, {11, 27}, {11, 47}, {6, 46}, {10, 17}, {11, 16}, {8, 44}, {6, 45},
   {10, 18}, {9, 19},  {11, 62}, {11, 61}, {11, 2},  {11, 1}, {3, 57},  {3, 58},  {3, 5},  {3, 6},
   {0, 48},  {5, 49},  {1, 14},  {0, 15},  {8, 51},  {5, 50}, {1, 13},  {9, 12},  {4, 63}, {1, 60},
   {5, 3},   {2, 0},   {9, 56},  {1, 59},  {5, 4},   {8, 7},  {11, 55}, {6, 54},  {10, 9}, {11, 8},
   {8, 52},  {6, 53},  {10, 10}, {9, 11}}};

const uint32_t DriveQuantstepSize[64] = {
  16384, 15024, 13777, 12634, 11585, 10624, 9742, 8933, 8192, 7512, 6889, 6317, 5793,
  5312,  4871,  4467,  4096,  3756,  3444,  3158, 2896, 2656, 2435, 2233, 2048, 1878,
  1722,  1579,  1448,  1328,  1218,  1117,  1024, 939,  861,  790,  724,  664,  609,
  558,   512,   470,   431,   395,   362,   332,  304,  279,  256,  235,  215,  197,
  181,   166,   152,   140,   128,   117,   108,  99,   91,   83,   76,   70,
};
const uint32_t DriveInerseQuantstepSize[64] = {
  64,   70,   76,   83,   91,   99,   108,  117,   128,   140,   152,   166,   181,
  197,  215,  235,  256,  279,  304,  332,  362,   395,   431,   470,   512,   558,
  609,  664,  724,  790,  861,  939,  1024, 1117,  1218,  1328,  1448,  1579,  1722,
  1878, 2048, 2233, 2435, 2656, 2896, 3158, 3444,  3756,  4096,  4467,  4871,  5312,
  5793, 6317, 6889, 7512, 8192, 8933, 9742, 10624, 11585, 12634, 13777, 15024,
};
const uint32_t encoderShiftBit = 14;
const uint32_t decoderShiftBit = 6;
const uint8_t neighborCount = 6;

// clang-format off
// pinpoint a neighbor with Morton code by adding the shift to the Morton code of a base position 
const int neighborMortonShiftFromBase[18] = {
  /*0b000000,*/   0b000001,   /*0b001000,*/   // (x,y,z),     (x,y,z+1),     (x,y,z+2)
    0b000010,     0b000011,     0b001010,     // (x,y+1,z),   (x,y+1,z+1),   (x,y+1,z+2)
  /*0b010000,*/   0b010001,   /*0b011000,*/   // (x,y+2,z),   (x,y+2,z+1),   (x,y+2,z+2)
    0b000100,     0b000101,     0b001100,     // (x+1,y,z),   (x+1,y,z+1),   (x+1,y,z+2)
    0b000110,   /*0b000111,*/   0b001110,     // (x+1,y+1,z), (x+1,y+1,z+1), (x+1,y+1,z+2)
    0b010100,     0b010101,     0b011100,     // (x+1,y+2,z), (x+1,y+2,z+1), (x+1,y+2,z+2)
  /*0b100000,*/   0b100001,   /*0b101000,*/   // (x+2,y,z),   (x+2,y,z+1),   (x+2,y,z+2)
    0b100010,     0b100011,     0b101010,     // (x+2,y+1,z), (x+2,y+1,z+1), (x+2,y+1,z+2)
  /*0b110000,*/   0b110001,   /*0b111000,*/   // (x+2,y+2,z), (x+2,y+2,z+1), (x+2,y+2,z+2)
};

// neighbor index in Morton order in a 3x3x3 neighborhood
const int neighborIndex[18] = {
  /*0,*/  1,  /*2,*/
    3,    4,    5,
  /*6,*/  7,  /*8,*/
    9,    10,   11,
    12, /*13,*/ 14,
    15,   16,   17,
  /*18,*/ 19, /*20,*/
    21,   22,   23,
  /*24,*/ 25, /*26*/
};

// relative position in X axis of neighbors in a 3x3x3 neighborhood
const int neighborDeltaX[18] = {
  /*-1,*/  -1,  /*-1,*/
    -1,    -1,    -1,
  /*-1,*/  -1,  /*-1,*/
     0,     0,     0,
     0,   /*0,*/   0,
     0,     0,     0,
   /*1,*/   1,   /*1,*/
     1,     1,     1,
   /*1,*/   1,   /*1*/
};

// relative position in Y axis of neighbors in a 3x3x3 neighborhood
const int neighborDeltaY[18] = {
  /*-1,*/  -1,  /*-1,*/
     0,     0,     0,
   /*1,*/   1,   /*1,*/
    -1,    -1,    -1,
     0,   /*0,*/   0,
     1,     1,     1,
  /*-1,*/  -1,  /*-1,*/
     0,     0,     0,
   /*1,*/   1,   /*1*/
};

// relative position in Z axis of neighbors in a 3x3x3 neighborhood
const int neighborDeltaZ[18] = {
  /*-1,*/  0,  /*1,*/
    -1,    0,    1,
  /*-1,*/  0,  /*1,*/
    -1,    0,    1,
    -1,  /*0,*/  1,
    -1,    0,    1,
  /*-1,*/  0,  /*1,*/
    -1,    0,    1,
  /*-1,*/  0,  /*1*/
};

// for 8 child nodes, the index (in Morton order) of 6 nearest nodes in parent-level
const int childNeighborIdx[8][6] = {
  { 4, 10, 12,  1,  3,  9,},
  { 4, 10, 14,  1,  5, 11,},
  { 4, 16, 12,  7,  3, 15,},
  { 4, 16, 14,  7,  5, 17,},
  {22, 10, 12, 19, 21,  9,},
  {22, 10, 14, 19, 23, 11,},
  {22, 16, 12, 25, 21, 15,},
  {22, 16, 14, 25, 23, 17,},
};
// clang-format on
